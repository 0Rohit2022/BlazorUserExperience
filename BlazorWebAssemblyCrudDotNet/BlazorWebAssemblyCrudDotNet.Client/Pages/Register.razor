@page "/register"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms

<h3>Register</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p>@errorMessage</p>
}

<EditForm Model="@registration" OnSubmit="HandleSubmit">
    <div class="form-group">
        <label for="username">Username:</label>
        <InputText autocomplete="off" required id="username" class="form-control" @bind-Value="registration.Username" />
        <ValidationMessage For="@(() => registration.Username)" />
    </div>
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText autocomplete="off" required id="name" class="form-control" @bind-Value="registration.Name" />
        <ValidationMessage For="@(() => registration.Name)" />
    </div>
    <div class="form-group">
        <label for="email">Email:</label>
        <InputText autocomplete="off" required id="email" type="email" class="form-control" @bind-Value="registration.Email" />
        <ValidationMessage For="@(() => registration.Email)" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText autocomplete="off" required id="password" type="password" class="form-control" @bind-Value="registration.Password" />
        <ValidationMessage For="@(() => registration.Password)" />
    </div>
    <div class="form-group">
        <label for="confirmPassword">Confirm Password:</label>
        <InputText autocomplete="off" required id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" />
        <ValidationMessage For="@(() => confirmPassword)" />
    </div>
    <div class="form-group">
        <label for="otp">OTP:</label>
        <InputText autocomplete="off" id="otp" class="form-control" @bind-Value="registration.OTP" />
        <ValidationMessage For="@(() => registration.OTP)" />
    </div>

    <div class="form-group">
        <label for="photo">Photo:</label>
        <InputFile required id="photo" class="form-control" OnChange="HandlePhotoChange" accept="image/*" />
        <ValidationMessage For="@(() => registration.Image)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
    <button type="button" class="btn btn-secondary" @onclick="ClearForm">Clear Form</button>
</EditForm>

@code {
    private Registration registration = new Registration();
    private string errorMessage = "";
    private string? confirmPassword;

    // Method to handle photo change
    // Method to handle photo change
    private async Task HandlePhotoChange(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                // Validate file type (accept only image files)
                if (!file.ContentType.StartsWith("image/"))
                {
                    errorMessage = "Please select a valid image file.";
                    return;
                }


                // Read image file as byte array
                using (var stream = file.OpenReadStream())
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    registration.Image = memoryStream.ToArray();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while processing the photo: {ex.Message}";
        }
    }


    private async Task HandleSubmit()
    {
        try
        {
            // Validate password match
            if (registration.Password != confirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            // Hash the password and confirm password using bcrypt algorithm
            string hashedPassword = BCrypt.HashPassword(registration.Password, BCrypt.GenerateSalt());
            string hashedConfirmPassword = BCrypt.HashPassword(confirmPassword, BCrypt.GenerateSalt());

            // Update the Password property with hashed password
            registration.Password = hashedPassword;
            confirmPassword = hashedConfirmPassword;

            // Send the registration data to the server
            var response = await Http.PostAsJsonAsync("api/users", registration);

            if (response.IsSuccessStatusCode)
            {
                errorMessage = "Registration successful!";
                // Redirect to the login page
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void ClearForm()
    {
        registration = new Registration();
        errorMessage = string.Empty;
        confirmPassword = string.Empty;
    }
}
